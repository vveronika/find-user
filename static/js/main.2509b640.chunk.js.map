{"version":3,"sources":["components/PrimaryInput/PrimaryInput.styled.js","components/PrimaryInput/index.tsx","components/ItemsList/ItemsList.styled.js","components/ListItem/ListItem.styled.js","components/ListItem/index.tsx","components/ItemsList/index.tsx","screens/UsersList/UsersList.styled.js","components/PageHeader/PageHeader.styled.js","components/PageHeader/index.tsx","components/InfoMessage/InfoMessage.styled.js","components/InfoMessage/index.tsx","redux/actions/users.ts","redux/actionTypes.ts","screens/UsersList/index.tsx","redux/reducers/users.ts","redux/reducers/index.ts","redux/store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","styled","input","PrimaryInput","props","value","onChange","placeholder","ListWrapper","ul","ItemWrapper","li","OrderNumber","span","Title","p","Subtitle","ListItem","orderNumber","title","subtitle","ItemsList","items","map","item","index","key","id","name","username","UsersListWrapper","div","HeaderWrapper","h1","PageHeader","InfoBox","InfoMessage","fetchUsers","dispatch","fetch","then","response","ok","Error","statusText","json","res","type","payload","catch","failed","connect","state","users","useState","queryString","onQueryChange","loading","onLoaded","useMemo","setTimeout","useEffect","length","filteredUsers","filter","user","toLowerCase","indexOf","e","currentTarget","initialState","reducer","action","combineReducers","usersReducer","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2509b640.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Input = styled.input`\n  font-family: \"Lato\", sans-serif;\n  border: none;\n  padding: 10px;\n  border-bottom: 2px solid #cccbc7;\n  outline: none;\n  transition: border-color 0.2s linear;\n\n  :focus {\n    border-color: #febb3f;\n  }\n`;\n","import React from \"react\";\nimport { Input } from \"./PrimaryInput.styled\";\n\ninterface Props {\n  value: string;\n  placeholder?: string;\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n}\n\nconst PrimaryInput = (props: Props) => {\n  return (\n    <Input\n      value={props.value}\n      onChange={props.onChange}\n      placeholder={props.placeholder}\n    />\n  );\n};\n\nexport default PrimaryInput;\n","import styled from \"styled-components\";\n\nexport const ListWrapper = styled.ul`\n  margin: 30px 0;\n  padding: 0;\n`;\n","import styled from \"styled-components\";\n\nexport const ItemWrapper = styled.li`\n  font-family: \"Lato\", sans-serif;\n  display: flex;\n  margin-bottom: 8px;\n  align-items: center;\n`;\n\nexport const OrderNumber = styled.span`\n  display: block;\n  margin-right: 3px;\n  color: #cccbc7;\n  font-size: 11px;\n`;\n\nexport const Title = styled.p`\n  display: block;\n  margin: 0 3px 0;\n  font-size: 14px;\n`;\n\nexport const Subtitle = styled.span`\n  display: block;\n  color: #cccbc7;\n  font-size: 11px;\n\n  &:before {\n    content: '@';\n  }\n`;\n","import React from \"react\";\nimport { ItemWrapper, OrderNumber, Title, Subtitle } from \"./ListItem.styled\";\n\ninterface Props {\n  orderNumber: number;\n  title: string;\n  subtitle: string;\n}\n\nconst ListItem = (props: Props) => {\n  return (\n    <ItemWrapper>\n      <OrderNumber>{props.orderNumber + 1}.</OrderNumber>\n      <Title>{props.title}</Title>\n      <Subtitle>{props.subtitle}</Subtitle>\n    </ItemWrapper>\n  );\n};\n\nexport default ListItem;\n","import React from \"react\";\nimport { ListWrapper } from \"./ItemsList.styled\";\nimport ListItem from \"../ListItem\";\nimport { User } from \"../../models/user\";\n\ninterface Props {\n  items: User[];\n}\n\nconst ItemsList = (props: Props) => {\n  return (\n    <ListWrapper>\n      {props.items.map((item, index) => (\n        <ListItem\n          key={item.id}\n          orderNumber={index}\n          title={item.name}\n          subtitle={item.username}\n        />\n      ))}\n    </ListWrapper>\n  );\n};\n\nexport default ItemsList;\n","import styled from \"styled-components\";\n\nexport const UsersListWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  @media (min-width: 700px) {\n    padding: 0 20%;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const HeaderWrapper = styled.div`\n  margin-bottom: 10px;\n`;\n\nexport const Title = styled.h1`\n  font-family: \"Lato\", sans-serif;\n`;\n","import React from \"react\";\nimport { HeaderWrapper, Title } from \"./PageHeader.styled\";\n\ninterface Props {\n  title: string;\n}\n\nconst PageHeader = (props: Props) => {\n  return (\n    <HeaderWrapper>\n      <Title>{props.title}</Title>\n    </HeaderWrapper>\n  );\n};\n\nexport default PageHeader;\n","import styled from \"styled-components\";\n\nexport const InfoBox = styled.div`\n  margin: 30px 0;\n  padding: 0;\n`;\n\nexport const Title = styled.div`\n  font-family: \"Lato\", sans-serif;\n  color: #febb3f;\n  font-size: 14px;\n`;\n","import React from \"react\";\nimport { InfoBox, Title } from \"./InfoMessage.styled\";\n\ninterface Props {\n  title: string;\n}\n\nconst InfoMessage = (props: Props) => {\n  return (\n    <InfoBox>\n      <Title>{props.title}</Title>\n    </InfoBox>\n  );\n};\n\nexport default InfoMessage;\n","import * as actionTypes from \"../actionTypes\";\nimport { User } from \"../../models/user\";\n\nexport default function fetchUsers() {\n  return (dispatch: Function) => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n        return response;\n      })\n      .then(response => response.json())\n      .then(res => dispatch(fetchUsersSuccess(res)))\n      .catch(() => dispatch(fetchUsersFailed(true)));\n  };\n}\n\nfunction fetchUsersFailed(failed: boolean) {\n  return {\n    type: actionTypes.FETCH_USERS_FAILED,\n    failed\n  };\n}\n\nfunction fetchUsersSuccess(payload: User[]) {\n  return {\n    type: actionTypes.FETCH_USERS_SUCCESS,\n    payload\n  };\n}\n","export const FETCH_USERS_FAILED = \"FETCH_USERS_FAILED\";\nexport const FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\n","import React, { useState, useMemo, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport PrimaryInput from \"../../components/PrimaryInput\";\nimport ItemsList from \"../../components/ItemsList\";\nimport { User } from \"../../models/user\";\nimport { UsersListWrapper } from \"./UsersList.styled\";\nimport PageHeader from \"../../components/PageHeader\";\nimport InfoMessage from \"../../components/InfoMessage\";\nimport { RootState } from \"../../models/rootState\";\nimport { fetchUsers } from \"../../redux/actions\";\n\ninterface Props {\n  fetchUsers: () => void;\n  users: User[];\n}\n\nconst UsersList = (props: Props) => {\n  const [queryString, onQueryChange] = useState(\"\");\n  const [loading, onLoaded] = useState(true);\n\n  const { fetchUsers } = props;\n\n  useMemo(() => {\n    setTimeout(() => {\n      fetchUsers();\n    }, 200);\n  }, [fetchUsers]);\n\n  useEffect(() => {\n    if (props.users.length > 0) {\n      onLoaded(false);\n    }\n  }, [props.users.length]);\n\n  const updateSearch = (e: React.FormEvent<HTMLInputElement>) => {\n    onQueryChange(e.currentTarget.value);\n  };\n\n  const filteredUsers = props.users.filter(user => {\n    return user.name.toLowerCase().indexOf(queryString.toLowerCase()) !== -1;\n  });\n\n  return (\n    <UsersListWrapper>\n      <PageHeader title=\"Users list\" />\n      <PrimaryInput\n        value={queryString}\n        onChange={updateSearch}\n        placeholder=\"Search by user name...\"\n      />\n      {loading && <InfoMessage title=\"Loading users...\" />}\n      {filteredUsers.length > 0 && <ItemsList items={filteredUsers} />}\n      {filteredUsers.length === 0 && !loading && (\n        <InfoMessage title=\"No users found, try again!\" />\n      )}\n    </UsersListWrapper>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  const users = state.users.users;\n  return { users };\n};\n\nconst mapDispatchToProps = (dispatch: Function) => {\n  return {\n    fetchUsers: () => dispatch(fetchUsers())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);\n","import { FETCH_USERS_SUCCESS } from \"../actionTypes\";\nimport { User } from \"../../models/user\";\n\nexport interface FetchUsersSuccessAction {\n  type: \"FETCH_USERS_SUCCESS\";\n  payload: User[];\n}\n\nexport type UsersActions = FetchUsersSuccessAction;\n\nconst initialState = {\n  users: []\n};\n\nconst reducer = (state = initialState, action: UsersActions) => {\n  switch (action.type) {\n    case FETCH_USERS_SUCCESS:\n      return {\n        ...state,\n        users: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\n\nimport usersReducer from \"./users\";\n\nexport default combineReducers({\n  users: usersReducer\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension/developmentOnly\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__: any;\n  }\n}\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport UsersList from \"./screens/UsersList\";\nimport store from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <UsersList />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}